*************************************************************************
**   AndroBugs Framework - Android App Security Vulnerability Scanner  **
**                            version: 1.0.0                           **
**     author: Yu-Cheng Lin (@AndroBugs, http://www.AndroBugs.com)     **
**               contact: androbugs.framework@gmail.com                **
*************************************************************************
Platform: Android
Package Name: com.hbl.android.hblmobilebanking
Package Version Name: 2.12.8
Package Version Code: 172
Min Sdk: 23
Target Sdk: 33
MD5   : 1aca5032ed5c406a83f953b72b805ff0
SHA1  : f63c90a4e90ba480b29754b07267c13b4ce14297
SHA256: ce04854f44937a758801cb85a3f18af3dcba1dae283ef757884cfc6f17a0e576
SHA512: 772b819295db8213fd3b3541ad5a4bf9057f3b5bb56b8307fd9cef8cebda5e6af0f9bfe2318ad0b214827fdc8debd5104a347a44487dfec2098f7086cb517559
Analyze Signature: 75fcd86e2a2e2d0572bc9d3dd166394332aa28d61e5b8c35e240656c17243f17c89b460a3106999dfdb78b816f898375933810af3b19a6db0b72a0287f07f66d
------------------------------------------------------------------------------------------------
[Critical] <Implicit_Intent> Implicit Service Checking:
           To ensure your app is secure, always use an explicit intent when starting a Service and DO NOT declare intent filters for your
           services. Using an implicit intent to start a service is a security hazard because you cannot be certain what service will
           respond to the intent, and the user cannot see which service starts.
           Reference: http://developer.android.com/guide/components/intents-filters.html#Types
               => com.huawei.hms.support.api.push.service.HmsMsgService
[Critical]  AndroidManifest "intent-filter" Settings Checking:
           Misconfiguration in "intent-filter" of these components (AndroidManifest.xml).
           Config "intent-filter" should have at least one "action".
           Reference: http://developer.android.com/guide/topics/manifest/intent-filter-element.html
                 activity => com.hbl.android.hblmobilebanking.login.LoginActivityNew
[Critical] <SSL_Security> SSL Connection Checking:
           URLs that are NOT under SSL (Total:5):
               http://javax.xml.XMLConstants/feature/secure-processing
                   => Lcom/fasterxml/jackson/databind/ext/DOMDeserializer;-><clinit>()V
               http://play.google.com/store/apps/details?id=com.facebook.orca
                   => Lcom/facebook/messenger/MessengerUtils;->openMessengerInPlayStore(Landroid/content/Context;)V
               http://www.android.com/
                   => Lcom/facebook/soloader/SoLoader;->loadLibraryOnNonAndroid(Ljava/lang/String;)Ljava/lang/Boolean;
               http://xmlpull.org/v1/doc/features.html#process-docdecl
                   => Lcom/caverock/androidsvg/SVGParser;->parseUsingXmlPullParser(Ljava/io/InputStream; Z)V
               http://xmlpull.org/v1/doc/features.html#process-namespaces
                   => Lcom/caverock/androidsvg/SVGParser;->parseUsingXmlPullParser(Ljava/io/InputStream; Z)V
[Critical] <WebView><Remote Code Execution><#CVE-2013-4710#> WebView RCE Vulnerability Checking:
           Found a critical WebView "addJavascriptInterface" vulnerability. This method can be used to allow JavaScript to control the host
           application.
           This is a powerful feature, but also presents a security risk for applications targeted to API level JELLY_BEAN(4.2) or below,
           because JavaScript could use reflection to access an injected object's public fields. Use of this method in a WebView containing
           untrusted content could allow an attacker to manipulate the host application in unintended ways, executing Java code with the
           permissions of the host application.
           Reference:
             1."http://developer.android.com/reference/android/webkit/WebView.html#addJavascriptInterface(java.lang.Object,
           java.lang.String) "
             2.https://labs.mwrinfosecurity.com/blog/2013/09/24/webview-addjavascriptinterface-remote-code-execution/
             3.http://50.56.33.56/blog/?p=314
             4.http://blog.trustlook.com/2013/09/04/alert-android-webview-addjavascriptinterface-code-execution-vulnerability/
           Please modify the below code:
               => Lcom/facebook/appevents/AppEventsLoggerImpl;->augmentWebView(Landroid/webkit/WebView; Landroid/content/Context;)V (0x8c)
                    ---> Landroid/webkit/WebView;->addJavascriptInterface(Ljava/lang/Object; Ljava/lang/String;)V
               => Lbolts/WebViewAppLinkResolver$2;->then(Lbolts/Task;)Lbolts/Task; (0x88) --->
                    Landroid/webkit/WebView;->addJavascriptInterface(Ljava/lang/Object; Ljava/lang/String;)V
[Warning]  External Storage Accessing:
           External storage access found (Remember DO NOT write important files to external storages):
               => Landroidx/core/content/FileProvider;->parsePathStrategy(Landroid/content/Context;
                    Ljava/lang/String;)Landroidx/core/content/FileProvider$PathStrategy; (0xcc) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Landroidx/core/os/EnvironmentCompat;->getStorageState(Ljava/io/File;)Ljava/lang/String; (0x30) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lcom/facebook/common/statfs/StatFsHelper;->ensureInitialized()V (0x26) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lcom/facebook/internal/Utility;->refreshAvailableExternalStorage()V (0xc) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lcom/facebook/internal/Utility;->refreshTotalExternalStorage()V (0xc) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lcom/github/mikephil/charting/utils/FileUtils;->loadEntriesFromFile(Ljava/lang/String;)Ljava/util/List; (0x0) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lcom/github/mikephil/charting/utils/FileUtils;->saveToSdCard(Ljava/util/List; Ljava/lang/String;)V (0x0) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lcom/facebook/cache/disk/DefaultDiskStorage;->isExternal(Ljava/io/File; Lcom/facebook/cache/common/CacheErrorLogger;)Z
                    (0x2) ---> Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lcom/github/mikephil/charting/charts/Chart;->saveToGallery(Ljava/lang/String; Ljava/lang/String; Ljava/lang/String;
                    Landroid/graphics/Bitmap$CompressFormat; I)Z (0x18) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
               => Lcom/github/mikephil/charting/charts/Chart;->saveToPath(Ljava/lang/String; Ljava/lang/String;)Z (0x16) --->
                    Landroid/os/Environment;->getExternalStorageDirectory()Ljava/io/File;
[Warning]  AndroidManifest Exported Components Checking:
           Found "exported" components(except for Launcher) for receiving outside applications' actions (AndroidManifest.xml).
           These components can be initilized by other apps. You should add or modify the attribute to [exported="false"] if you don't want
           to.
           You can also protect it with a customized permission with "signature" or higher protectionLevel and specify in
           "android:permission" attribute.
                  service => com.huawei.hms.support.api.push.service.HmsMsgService
[Warning]  AndroidManifest Normal ProtectionLevel of Permission Checking:
           The protection level of the below classes is "normal" or default (AndroidManifest.xml).
           The app should declare the permission with the "android:protectionLevel" of "signature" or "signatureOrSystem" so that other apps
           cannot register and receive message for this app.
           android:protectionLevel="signature" ensures that apps with request a permission must be signed with same certificate as the
           application that declared the permission.
           Please make sure these permission are all really need to be exported or otherwise change to "signature" or "signatureOrSystem"
           protection level.
               android.permission.FLASHLIGHT
[Warning] <WebView> WebView Local File Access Attacks Checking:
           Found "setAllowFileAccess(true)" or not set(enabled by default) in WebView. The attackers could inject malicious script into
           WebView and exploit the opportunity to access local resources. This can be mitigated or prevented by disabling local file system
           access. (It is enabled by default)
           Note that this enables or disables file system access only. Assets and resources are still accessible using file:///android_asset
           and file:///android_res.
           The attackers can use "mWebView.loadUrl("file:///data/data/[Your_Package_Name]/[File]");" to access app's local file.
           Reference: (1)https://labs.mwrinfosecurity.com/blog/2012/04/23/adventures-with-android-webviews/
                      (2)http://developer.android.com/reference/android/webkit/WebSettings.html#setAllowFileAccess(boolean)
           Please add or modify "yourWebView.getSettings().setAllowFileAccess(false)" to your WebView:
               Lbolts/WebViewAppLinkResolver$2;->then(Lbolts/Task;)Lbolts/Task;
               Lcom/facebook/internal/WebDialog;->setUpWebView(I)V
[Warning] <WebView> WebView Potential XSS Attacks Checking:
           Found "setJavaScriptEnabled(true)" in WebView, which could exposed to potential XSS attacks. Please check the web page code
           carefully and sanitize the output:
               => Lcom/facebook/internal/WebDialog;->setUpWebView(I)V (0x5e) ---> Landroid/webkit/WebSettings;->setJavaScriptEnabled(Z)V
               => Lbolts/WebViewAppLinkResolver$2;->then(Lbolts/Task;)Lbolts/Task; (0x2a) --->
                    Landroid/webkit/WebSettings;->setJavaScriptEnabled(Z)V
[Notice] <Database><#CVE-2011-3901#> Android SQLite Databases Vulnerability Checking:
           This app is using Android SQLite databases but it's "NOT" suffering from SQLite Journal Information Disclosure Vulnerability.
[Notice]  File Unsafe Delete Checking:
           Everything you delete may be recovered by any user or attacker, especially rooted devices.
           Please make sure do not use "file.delete()" to delete essential files.
           Check this video: https://www.youtube.com/watch?v=tGw1fxUD-uY
               => Landroidx/browser/browseractions/BrowserServiceFileProvider$FileCleanupTask;->doInBackground([Ljava/lang/Void;)Ljava/lang/
                    Void; (0xbe) ---> Ljava/io/File;->delete()Z
               => Landroidx/camera/core/ImageSaver;->saveImageToTempFile()Ljava/io/File; (0x214) ---> Ljava/io/File;->delete()Z
               => Landroidx/camera/core/ImageSaver;->copyTempFileToDestination(Ljava/io/File;)V (0xec) ---> Ljava/io/File;->delete()Z
               => Landroidx/camera/core/ImageSaver;->copyTempFileToDestination(Ljava/io/File;)V (0x12a) ---> Ljava/io/File;->delete()Z
               => Landroidx/camera/core/ImageSaver;->copyTempFileToDestination(Ljava/io/File;)V (0x144) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/content/FileProvider;->delete(Landroid/net/Uri; Ljava/lang/String; [Ljava/lang/String;)I (0xc) --->
                    Ljava/io/File;->delete()Z
               => Landroidx/core/graphics/TypefaceCompatBaseImpl;->createFromInputStream(Landroid/content/Context;
                    Ljava/io/InputStream;)Landroid/graphics/Typeface; (0x1c) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/graphics/TypefaceCompatBaseImpl;->createFromInputStream(Landroid/content/Context;
                    Ljava/io/InputStream;)Landroid/graphics/Typeface; (0x34) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/graphics/TypefaceCompatBaseImpl;->createFromInputStream(Landroid/content/Context;
                    Ljava/io/InputStream;)Landroid/graphics/Typeface; (0x3e) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/graphics/TypefaceCompatBaseImpl;->createFromInputStream(Landroid/content/Context;
                    Ljava/io/InputStream;)Landroid/graphics/Typeface; (0x46) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/graphics/TypefaceCompatBaseImpl;->createFromResourcesFontFile(Landroid/content/Context;
                    Landroid/content/res/Resources; I Ljava/lang/String; I)Landroid/graphics/Typeface; (0x1c) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/graphics/TypefaceCompatBaseImpl;->createFromResourcesFontFile(Landroid/content/Context;
                    Landroid/content/res/Resources; I Ljava/lang/String; I)Landroid/graphics/Typeface; (0x34) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/graphics/TypefaceCompatBaseImpl;->createFromResourcesFontFile(Landroid/content/Context;
                    Landroid/content/res/Resources; I Ljava/lang/String; I)Landroid/graphics/Typeface; (0x3e) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/graphics/TypefaceCompatBaseImpl;->createFromResourcesFontFile(Landroid/content/Context;
                    Landroid/content/res/Resources; I Ljava/lang/String; I)Landroid/graphics/Typeface; (0x46) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/graphics/TypefaceCompatUtil;->copyToDirectBuffer(Landroid/content/Context; Landroid/content/res/Resources;
                    I)Ljava/nio/ByteBuffer; (0x1c) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/graphics/TypefaceCompatUtil;->copyToDirectBuffer(Landroid/content/Context; Landroid/content/res/Resources;
                    I)Ljava/nio/ByteBuffer; (0x2c) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/graphics/TypefaceCompatUtil;->copyToDirectBuffer(Landroid/content/Context; Landroid/content/res/Resources;
                    I)Ljava/nio/ByteBuffer; (0x36) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/util/AtomicFile;->rename(Ljava/io/File; Ljava/io/File;)V (0x10) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/util/AtomicFile;->delete()V (0x4) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/util/AtomicFile;->delete()V (0xe) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/util/AtomicFile;->delete()V (0x18) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/util/AtomicFile;->failWrite(Ljava/io/FileOutputStream;)V (0x38) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/util/AtomicFile;->openRead()Ljava/io/FileInputStream; (0x42) ---> Ljava/io/File;->delete()Z
               => Landroidx/exifinterface/media/ExifInterface;->saveAttributes()V (0x9c) ---> Ljava/io/File;->delete()Z
               => Landroidx/exifinterface/media/ExifInterface;->saveAttributes()V (0xca) ---> Ljava/io/File;->delete()Z
               => Landroidx/multidex/MultiDex;->clearOldDexDir(Landroid/content/Context;)V (0xf8) ---> Ljava/io/File;->delete()Z
               => Landroidx/multidex/MultiDex;->clearOldDexDir(Landroid/content/Context;)V (0x16c) ---> Ljava/io/File;->delete()Z
               => Landroidx/multidex/MultiDexExtractor;->clearDexDir()V (0xb2) ---> Ljava/io/File;->delete()Z
               => Landroidx/multidex/MultiDexExtractor;->extract(Ljava/util/zip/ZipFile; Ljava/util/zip/ZipEntry; Ljava/io/File;
                    Ljava/lang/String;)V (0x136) ---> Ljava/io/File;->delete()Z
               => Landroidx/multidex/MultiDexExtractor;->extract(Ljava/util/zip/ZipFile; Ljava/util/zip/ZipEntry; Ljava/io/File;
                    Ljava/lang/String;)V (0x200) ---> Ljava/io/File;->delete()Z
               => Landroidx/multidex/MultiDexExtractor;->performExtractions()Ljava/util/List; (0x1da) ---> Ljava/io/File;->delete()Z
               => Lcom/bumptech/glide/disklrucache/DiskLruCache;->deleteIfExists(Ljava/io/File;)V (0xc) ---> Ljava/io/File;->delete()Z
               => Lcom/bumptech/glide/disklrucache/DiskLruCache;->open(Ljava/io/File; I I J)Lcom/bumptech/glide/disklrucache/DiskLruCache;
                    (0x44) ---> Ljava/io/File;->delete()Z
               => Lcom/bumptech/glide/disklrucache/DiskLruCache;->rebuildJournal()V (0x194) ---> Ljava/io/File;->delete()Z
               => Lcom/bumptech/glide/disklrucache/DiskLruCache;->remove(Ljava/lang/String;)Z (0x4a) ---> Ljava/io/File;->delete()Z
               => Lcom/bumptech/glide/disklrucache/Util;->deleteContents(Ljava/io/File;)V (0x2a) ---> Ljava/io/File;->delete()Z
               => Lcom/facebook/appevents/AppEventStore;->readAndClearStore()Lcom/facebook/appevents/PersistedEvents; (0x54) --->
                    Ljava/io/File;->delete()Z
               => Lcom/facebook/appevents/AppEventStore;->readAndClearStore()Lcom/facebook/appevents/PersistedEvents; (0xa0) --->
                    Ljava/io/File;->delete()Z
               => Lcom/facebook/appevents/AppEventStore;->readAndClearStore()Lcom/facebook/appevents/PersistedEvents; (0xce) --->
                    Ljava/io/File;->delete()Z
               => Lcom/facebook/appevents/AppEventStore;->readAndClearStore()Lcom/facebook/appevents/PersistedEvents; (0xfc) --->
                    Ljava/io/File;->delete()Z
               => Lcom/facebook/appevents/AppEventStore;->saveEventsToDisk(Lcom/facebook/appevents/PersistedEvents;)V (0x62) --->
                    Ljava/io/File;->delete()Z
               => Lcom/facebook/common/file/FileTree;->deleteRecursively(Ljava/io/File;)Z (0x12) ---> Ljava/io/File;->delete()Z
               => Lcom/facebook/common/file/FileUtils;->mkdirs(Ljava/io/File;)V (0x1a) ---> Ljava/io/File;->delete()Z
               => Lcom/facebook/common/file/FileUtils;->rename(Ljava/io/File; Ljava/io/File;)V (0xc) ---> Ljava/io/File;->delete()Z
               => Lcom/facebook/internal/FileLruCache$2;->run()V (0x10) ---> Ljava/io/File;->delete()Z
               => Lcom/facebook/internal/FileLruCache$BufferFile;->deleteAll(Ljava/io/File;)V (0x20) ---> Ljava/io/File;->delete()Z
               => Lcom/facebook/internal/FileLruCache;->renameToTargetAndTrim(Ljava/lang/String; Ljava/io/File;)V (0x22) --->
                    Ljava/io/File;->delete()Z
               => Lcom/facebook/internal/FileLruCache;->trim()V (0x194) ---> Ljava/io/File;->delete()Z
               => Lcom/facebook/internal/FileLruCache;->openPutStream(Ljava/lang/String; Ljava/lang/String;)Ljava/io/OutputStream; (0xc)
                    ---> Ljava/io/File;->delete()Z
               => Lcom/facebook/internal/NativeAppCallAttachmentStore;->addAttachments(Ljava/util/Collection;)V (0x110) --->
                    Ljava/io/File;->delete()Z
               => Lcom/facebook/internal/Utility;->deleteDirectory(Ljava/io/File;)V (0x3e) ---> Ljava/io/File;->delete()Z
               => Lcom/facebook/internal/instrument/InstrumentUtility;->deleteFile(Ljava/lang/String;)Z (0x1c) --->
                    Ljava/io/File;->delete()Z
               => Lcom/facebook/soloader/NativeDepsUnpacker;->ensureDirExists(Ljava/io/File;)Z (0x18) ---> Ljava/io/File;->delete()Z
               => Lcom/facebook/soloader/SysUtil;->deleteOrThrow(Ljava/io/File;)V (0x52) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/graphics/TypefaceCompatApi21Impl;->createFromFontFamilyFilesResourceEntry(Landroid/content/Context;
                    Landroidx/core/content/res/FontResourcesParserCompat$FontFamilyFilesResourceEntry; Landroid/content/res/Resources;
                    I)Landroid/graphics/Typeface; (0x40) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/graphics/TypefaceCompatApi21Impl;->createFromFontFamilyFilesResourceEntry(Landroid/content/Context;
                    Landroidx/core/content/res/FontResourcesParserCompat$FontFamilyFilesResourceEntry; Landroid/content/res/Resources;
                    I)Landroid/graphics/Typeface; (0x6c) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/graphics/TypefaceCompatApi21Impl;->createFromFontFamilyFilesResourceEntry(Landroid/content/Context;
                    Landroidx/core/content/res/FontResourcesParserCompat$FontFamilyFilesResourceEntry; Landroid/content/res/Resources;
                    I)Landroid/graphics/Typeface; (0x74) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/graphics/TypefaceCompatApi21Impl;->createFromFontFamilyFilesResourceEntry(Landroid/content/Context;
                    Landroidx/core/content/res/FontResourcesParserCompat$FontFamilyFilesResourceEntry; Landroid/content/res/Resources;
                    I)Landroid/graphics/Typeface; (0x82) ---> Ljava/io/File;->delete()Z
               => Landroidx/core/graphics/TypefaceCompatApi21Impl;->createFromFontFamilyFilesResourceEntry(Landroid/content/Context;
                    Landroidx/core/content/res/FontResourcesParserCompat$FontFamilyFilesResourceEntry; Landroid/content/res/Resources;
                    I)Landroid/graphics/Typeface; (0x8a) ---> Ljava/io/File;->delete()Z
               => Landroidx/documentfile/provider/RawDocumentFile;->deleteContents(Ljava/io/File;)Z (0x32) ---> Ljava/io/File;->delete()Z
               => Landroidx/documentfile/provider/RawDocumentFile;->delete()Z (0xe) ---> Ljava/io/File;->delete()Z
               => Lcom/facebook/cache/disk/DefaultDiskStorage$InserterImpl;->cleanUp()Z (0x14) ---> Ljava/io/File;->delete()Z
               => Lcom/facebook/cache/disk/DefaultDiskStorage$PurgingVisitor;->postVisitDirectory(Ljava/io/File;)V (0x20) --->
                    Ljava/io/File;->delete()Z
               => Lcom/facebook/cache/disk/DefaultDiskStorage$PurgingVisitor;->visitFile(Ljava/io/File;)V (0x14) --->
                    Ljava/io/File;->delete()Z
               => Lcom/facebook/cache/disk/DefaultDiskStorage;->doRemove(Ljava/io/File;)J (0x1a) ---> Ljava/io/File;->delete()Z
               => Lcom/facebook/internal/FileLruCache$1;->onClose()V (0x24) ---> Ljava/io/File;->delete()Z
[Notice] <Hacker> APK Installing Source Checking:
           This app has code checking APK installer sources(e.g. from Google Play, from Amazon, etc.). It might be used to check for whether
           the app is hacked by the attackers.
               => Lcom/facebook/internal/AttributionIdentifiers;->getInstallerPackageName(Landroid/content/Context;)Ljava/lang/String;
                    (0x14) ---> Landroid/content/pm/PackageManager;->getInstallerPackageName(Ljava/lang/String;)Ljava/lang/String;
               => Lcom/google/android/gms/analytics/zzr;->zzc()Lcom/google/android/gms/internal/gtm/zzav; (0x3a) --->
                    Landroid/content/pm/PackageManager;->getInstallerPackageName(Ljava/lang/String;)Ljava/lang/String;
[Notice] <KeyStore><Hacker> KeyStore File Location:
           BKS Keystore file:
               assets/grs_sp.bks
               assets/hmsincas.bks
               assets/hmsrootcas.bks
[Notice] <KeyStore><Hacker> Possible KeyStore File Location:
           BKS possible keystore file:
               stamp-cert-sha256
[Notice] <Signature><Hacker> Getting Signature Code Checking:
           This app has code checking the package signature in the code. It might be used to check for whether the app is hacked by the
           attackers.
               => Landroidx/core/provider/FontsContractCompat;->getProvider(Landroid/content/pm/PackageManager;
                    Landroidx/core/provider/FontRequest; Landroid/content/res/Resources;)Landroid/content/pm/ProviderInfo; (0x36) --->
                    Landroid/content/pm/PackageManager;->getPackageInfo(Ljava/lang/String; I)Landroid/content/pm/PackageInfo;
               => Lcom/facebook/FacebookSdk;->getApplicationSignature(Landroid/content/Context;)Ljava/lang/String; (0x28) --->
                    Landroid/content/pm/PackageManager;->getPackageInfo(Ljava/lang/String; I)Landroid/content/pm/PackageInfo;
               => Lcom/facebook/internal/FacebookSignatureValidator;->validateSignature(Landroid/content/Context; Ljava/lang/String;)Z
                    (0x3a) ---> Landroid/content/pm/PackageManager;->getPackageInfo(Ljava/lang/String; I)Landroid/content/pm/PackageInfo;
               => Landroidx/browser/trusted/PackageIdentityUtils$Pre28Implementation;->getFingerprintsForPackage(Ljava/lang/String;
                    Landroid/content/pm/PackageManager;)Ljava/util/List; (0x4) --->
                    Landroid/content/pm/PackageManager;->getPackageInfo(Ljava/lang/String; I)Landroid/content/pm/PackageInfo;
[Notice]  AndroidManifest Exported Components Checking 2:
           Found "exported" components(except for Launcher) for receiving Google's "Android" actions (AndroidManifest.xml):
                 activity => com.hbl.android.hblmobilebanking.qr_operations.RequestMoneyQrActivity
                 activity => com.hbl.android.hblmobilebanking.qr_operations.QrGenerationActivity
                 activity => com.hbl.android.hblmobilebanking.tokenization.TokenizationWidget
                 activity => com.hbl.android.hblmobilebanking.login.LoginActivityNew
                 activity => com.tilismtech.tellotalk_news.ui.activities.NewListActivity
                  service => com.google.android.play.core.assetpacks.AssetPackExtractionService
[Info]  AndroidManifest Adb Backup Checking:
           This app has disabled Adb Backup.
[Info] <Command> Runtime Command Checking:
           This app is not using critical function 'Runtime.getRuntime().exec("...")'.
[Info] <Command> Executing "root" or System Privilege Checking:
           Did not find codes checking "root" permission(su) or getting system permission (It's still possible we did not find out).
[Info] <Database> SQLiteDatabase Transaction Deprecated Checking:
           Ignore checking "SQLiteDatabase:beginTransactionNonExclusive" because your set minSdk >= 11.
[Info] <Database> Android SQLite Databases Encryption (SQLite Encryption Extension (SEE)):
           This app is "NOT" using SQLite Encryption Extension (SEE) on Android (http://www.sqlite.org/android) to encrypt or decrpyt
           databases.
[Info] <Database> Android SQLite Databases Encryption (SQLCipher):
           This app is "NOT" using SQLCipher(http://sqlcipher.net/) to encrypt or decrpyt databases.
[Info] <Debug> Android Debug Mode Checking:
           DEBUG mode is OFF(android:debuggable="false") in AndroidManifest.xml.
[Info]  Dynamic Code Loading:
           No dynamic code loading(DexClassLoader) found.
[Info] <#BID 64208, CVE-2013-6271#> Fragment Vulnerability Checking:
           Did not detect the vulnerability of "Fragment" dynamically loading into "PreferenceActivity" or "SherlockPreferenceActivity"
[Info] <Framework> Framework - MonoDroid:
           This app is NOT using MonoDroid Framework (http://xamarin.com/android).
[Info] <Hacker> Base64 String Encryption:
           No encoded Base64 String or Urls found.
[Info] <Database><Hacker> Key for Android SQLite Databases Encryption:
           Did not find using the symmetric key(PRAGMA key) to encrypt the SQLite databases (It's still possible that it might use but we
           did not find out).
[Info] <Debug><Hacker> Codes for Checking Android Debug Mode:
           Did not detect codes for checking "ApplicationInfo.FLAG_DEBUGGABLE" in AndroidManifest.xml.
[Info] <KeyStore><Hacker> KeyStore Protection Checking:
           Ignore checking KeyStore protected by password or not because you're not using KeyStore.
[Info] <Hacker> Code Setting Preventing Screenshot Capturing:
           Did not detect this app has code setting preventing screenshot capturing.
[Info]  HttpURLConnection Android Bug Checking:
           Ignore checking "http.keepAlive" because you're not using "HttpURLConnection" and min_Sdk > 8.
[Info] <KeyStore> KeyStore Type Checking:
           KeyStore 'BKS' type check OK
[Info]  Google Cloud Messaging Suggestion:
           Nothing to suggest.
[Info] <#CVE-2013-4787#> Master Key Type I Vulnerability:
           No Master Key Type I Vulnerability in this APK.
[Info]  App Sandbox Permission Checking:
           No security issues "MODE_WORLD_READABLE" or "MODE_WORLD_WRITEABLE" found on 'openOrCreateDatabase' or 'openOrCreateDatabase2' or
           'getDir' or 'getSharedPreferences' or 'openFileOutput'
[Info]  Native Library Loading Checking:
           No native library loaded.
[Info]  AndroidManifest Dangerous ProtectionLevel of Permission Checking:
           No "dangerous" protection level customized permission found (AndroidManifest.xml).
[Info]  AndroidManifest PermissionGroup Checking:
           PermissionGroup in permission tag of AndroidManifest sets correctly.
[Info] <#CVE-2013-6272#> AndroidManifest Exported Lost Prefix Checking:
           No exported components that forgot to add "android:" prefix.
[Info]  AndroidManifest ContentProvider Exported Checking:
           No exported "ContentProvider" found (AndroidManifest.xml).
[Info] <Sensitive_Information> Getting IMEI and Device ID:
           Did not detect this app is getting the "device id(IMEI)" by "TelephonyManager.getDeviceId()" approach.
[Info] <Sensitive_Information> Getting ANDROID_ID:
           Did not detect this app is getting the 64-bit number "Settings.Secure.ANDROID_ID".
[Info]  Codes for Sending SMS:
           Did not detect this app has code for sending SMS messages (sendDataMessage, sendMultipartTextMessage or sendTextMessage).
[Info] <System> AndroidManifest sharedUserId Checking:
           This app does not use "android.uid.system" sharedUserId.
[Info] <SSL_Security> SSL Implementation Checking (Verifying Host Name in Custom Classes):
           Self-defined HOSTNAME VERIFIER checking OK.
[Info] <SSL_Security> SSL Implementation Checking (Verifying Host Name in Fields):
           Critical vulnerability "ALLOW_ALL_HOSTNAME_VERIFIER" field setting or "AllowAllHostnameVerifier" class instance not found.
[Info] <SSL_Security> SSL Implementation Checking (Insecure component):
           Did not detect SSLSocketFactory by insecure method "getInsecure".
[Info] <SSL_Security> SSL Implementation Checking (HttpHost):
           DEFAULT_SCHEME_NAME for HttpHost check: OK
[Info] <SSL_Security> SSL Implementation Checking (WebViewClient for WebView):
           Did not detect critical usage of "WebViewClient"(MITM Vulnerability).
[Info] <SSL_Security> SSL Certificate Verification Checking:
           Did not find vulnerable X509Certificate code.
[Info]  Unnecessary Permission Checking:
           Permission 'android.permission.ACCESS_MOCK_LOCATION' sets correctly.
[Info]  Accessing the Internet Checking:
           This app is using the Internet via HTTP protocol.
[Info]  AndroidManifest System Use Permission Checking:
           No system-level critical use-permission found.
------------------------------------------------------------
AndroBugs analyzing time: 14.477 secs
Total elapsed time: 76.654 secs
